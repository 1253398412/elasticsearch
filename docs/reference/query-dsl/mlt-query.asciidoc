[[query-dsl-mlt-query]]
=== More like this query
++++
<titleabbrev>More like this</titleabbrev>
++++

Returns documents like a provided text or set of documents.

The `more_like_this` (MLT) query selects a set of representative terms from a
provided input text or documents. It then forms a query using these terms,
executes the query, and returns the results. In addition to the input, you can
control how these terms are selected and how the query is formed. See
<<mlt-query-how-works>> for a detailed description of this process.

[[mlt-query-ex-requests]]
==== Example requests

[[mlt-query-ex-provided-text]]
===== Find documents like a provided text
The following search returns documents with values similar to `Once upon a
time` in the `title` and `description` fields, limiting the number of selected
terms to `12`.

[source,js]
----
GET /_search
{
    "query": {
        "more_like_this" : {
            "fields" : ["title", "description"],
            "like" : "Once upon a time",
            "min_term_freq" : 1,
            "max_query_terms" : 12
        }
    }
}
----
// CONSOLE

[[mlt-query-ex-provided-docs]]
===== Find documents like other documents
The following search returns documents similar to a provided text and other
existing documents.

You can provide input documents using the <<docs-multi-get,Multi GET API>>
syntax.

[source,js]
----
GET /_search
{
    "query": {
        "more_like_this" : {
            "fields" : ["title", "description"],
            "like" : [
            {
                "_index" : "imdb",
                "_id" : "1"
            },
            {
                "_index" : "imdb",
                "_id" : "2"
            },
            "and potentially some more text here as well"
            ],
            "min_term_freq" : 1,
            "max_query_terms" : 12
        }
    }
}
----
// CONSOLE

[[mlt-query-ex-artificial-docs]]
===== Find documents like an artificial document
The following query returns documents similar to documents in another index and
an <<docs-termvectors-artificial-doc,artificial document>> not present in that
index.

You can provide artificial documents using the
<<docs-termvectors-artificial-doc,artificial documents>> syntax.

[source,js]
----
GET /_search
{
    "query": {
        "more_like_this" : {
            "fields" : ["name.first", "name.last"],
            "like" : [
            {
                "_index" : "marvel",
                "doc" : {
                    "name": {
                        "first": "Ben",
                        "last": "Grimm"
                    },
                    "_doc": "You got no idea what I'd... what I'd give to be invisible."
                  }
            },
            {
                "_index" : "marvel",
                "_id" : "2"
            }
            ],
            "min_term_freq" : 1,
            "max_query_terms" : 12
        }
    }
}
----
// CONSOLE

[[mlt-top-level-params]]
==== Top-level parameters for `more_like_this`
The MLT query has the following parameter types:

* <<mlt-query-document-input-params,Document input parameters>>
* <<mlt-query-term-selection,Term selection parameters>>
* <<mlt-query-formation-params,Query formation parameters>>

Only the <<mlt-query-like-param,`like`>> parameter is required. All other
parameters have sensible defaults.

[[mlt-query-document-input-params]]
===== Document input parameters
[[mlt-query-like-param]]
`like`::
+
--
(Required, string or array of <<docs-multi-get,document objects>> and strings)
Free-form text or array of documents and text used to find similar documents.

Free-form text is analyzed using the <<mlt-query-fields-param,`fields`>>
analyzer. To override the analyzer, use a syntax similar to the
`per_field_analyzer` parameter of the <<docs-termvectors-per-field-analyzer,Term
vectors API>>.

To provide a document, use the <<docs-multi-get,Multi GET API>> syntax. When
specifying documents, values are fetched from the
<<mlt-query-fields-param,`fields`>> parameter unless overridden in each document
request.

Documents provided in this parameter must meet one of the following field
mapping requirements:

* The <<mapping-source-field,`_source`>> field is enabled.
* The <<mapping-store,`store`>> mapping parameter value is `true`.
* The <<term-vector,`term_vector`>> mapping parameter value is **not** `no`.

To provide artificial documents not present in an index, use the 
<<docs-termvectors-artificial-doc,artificial documents>> syntax. See
<<mlt-query-ex-artificial-docs>> for an example.


--

[[mlt-query-fields-param]]
`fields`::
(Optional, array of strings) <<keyword,`keyword`>> or <<text,`text`>> fields
from which to fetch and analyze text.

`unlike`::
+
--
(Optional, string or array of <<docs-multi-get,document objects>> and strings)
Free-form text or array of documents and text used with the
<<mlt-query-like-param,`like`>> parameter to exclude select terms.

For example, you can search for documents `like: "apple"` but `unlike: "cake
crumble tree"`. The syntax is the same as the <<mlt-query-like-param,`like`>>
parameter.
--

[[mlt-query-term-selection]]
===== Term selection parameters
[[mlt-query-analyzer-param]]
`analyzer`::
(Optional, string) <<analysis-analyzers,Analyzer>> used to free-form text in the
<<mlt-query-like-param,`like`>> parameter. Defaults to the analyzer of the first
field in the <<mlt-query-fields-param,`fields`>> parameter value.

`max_doc_freq`::
+
--
(Optional, integer) Maximum document frequency above which terms are ignored
from the <<mlt-query-like-param,`like`>>  parameter value. Defaults to `0`
(unbounded).

You can use this parameter to ignore highly frequent words, such as stop words.
--

`max_query_terms`::
+
--
(Optional, integer) Maximum number of query terms selected from the
<<mlt-query-like-param,`like`>> parameter value. Defaults to `25`.

Increasing this value provides greater accuracy but decreases query execution
speed.
--

`max_word_length`::
+
--
(Optional, integer) Maximum word length above which terms are
ignored. Defaults to `0` (unbounded).

This parameter replaces the `max_word_len` parameter, which is deprecated.
--

`min_doc_freq`::
(Optional, integer) Minimum document frequency below which terms are ignored
from the <<mlt-query-like-param,`like`>>  parameter value. Defaults to `5`.

`min_term_freq`::
(Optional, integer) Minimum term frequency below which terms are ignored from
the `like` parameter value. Defaults to `2`.

`min_word_length`::
+
--
(Optional, integer) Minimum word length below which terms are ignored from the
<<mlt-query-like-param,`like`>> parameter value. Defaults to `0`.

This parameter replaces the `min_word_len` parameter, which is deprecated.
--

`stop_words`::
+
--
(Optional, array of strings) Set of stop words. Any word in this array is
ignored.

If the <<mlt-query-analyzer-param,analyzer>> allows stop words, you can use this
parameter to explicitly ignore them.
--

[[mlt-query-formation-params]]
===== Query formation parameters
`boost`::
+
--
(Optional, float) Floating point number used to decrease or increase the
<<query-filter-context, relevance scores>> of returned documents for the MLT
query. Defaults to `1.0`.

You can use the `boost` parameter to adjust relevance scores for searches
containing two or more queries.

Boost values are relative to the default value of `1.0`. A boost value between
`0` and `1.0` decreases the relevance score. A value greater than `1.0`
increases the relevance score.
--

`boost_terms`::
+
--
(Optional, float) Each term in the formed query could be further boosted by
their https://en.wikipedia.org/wiki/Tf%E2%80%93idf[tf-idf] score. This floating
point number sets the boost factor to use for this feature. Defaults to
`0` (deactivated).

Any other positive value boosts terms using the provided boost factor.
--

`fail_on_unsupported_field`::
+
--
(Optional, boolean) Indicates whether {es} returns an error if the
<<mlt-query-fields-param,`fields`>> parameter contains a field type other than
`keyword` or `text`. Defaults to `true`.

If `false`, {es} ignores unsupported field types in the
<<mlt-query-fields-param,`fields`>> parameter instead of returning an error.
This means {es} could return no documents.
--

`include`::
(Optional, boolean)
Specifies whether the input documents should also be included in the search
results returned. Defaults to `false`.

`minimum_should_match`::
+
--
(Optional, string) Number of terms that must match the query after the
final query is formed. Defaults to `30%`.

See <<query-dsl-minimum-should-match,`minimum_should_match` parameter>> for
syntax and more information.
--


[[mlt-query-notes]]
==== Notes

[[mlt-query-how-works]]
===== How the MLT query works
Suppose we wanted to find all documents similar to a given input document.
Obviously, the input document itself should be its best match for that type of
query. And the reason would be mostly, according to
link:https://lucene.apache.org/core/4_9_0/core/org/apache/lucene/search/similarities/TFIDFSimilarity.html[Lucene scoring formula],
due to the terms with the highest tf-idf. Therefore, the terms of the input
document that have the highest tf-idf are good representatives of that
document, and could be used within a disjunctive query (or `OR`) to retrieve similar
documents. The MLT query simply extracts the text from the input document,
analyzes it, usually using the same analyzer at the field, then selects the
top K terms with highest tf-idf to form a disjunctive query of these terms.

IMPORTANT: The fields on which to perform MLT must be indexed and of type
`text` or `keyword``. Additionally, when using `like` with documents, either
`_source` must be enabled or the fields must be `stored` or store
`term_vector`. In order to speed up analysis, it could help to store term
vectors at index time.

For example, if we wish to perform MLT on the "title" and "tags.raw" fields,
we can explicitly store their `term_vector` at index time. We can still
perform MLT on the "description" and "tags" fields, as `_source` is enabled by
default, but there will be no speed up on analysis for these fields.

[source,js]
----
PUT /imdb
{
    "mappings": {
        "properties": {
            "title": {
                "type": "text",
                "term_vector": "yes"
            },
            "description": {
                "type": "text"
            },
            "tags": {
                "type": "text",
                "fields" : {
                    "raw": {
                        "type" : "text",
                        "analyzer": "keyword",
                        "term_vector" : "yes"
                    }
                }
            }
        }
    }
}
----
// CONSOLE